name: Ubuntu TAR CI

on:
  push:
    branches:
      - main
      - stable*
      - versus-ci
      - versus-ci-ubuntu
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: "${{ matrix.config.name }} | ${{ matrix.config.build_type }}"
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "TAR Ubuntu 16.04 x86_64",
            os: ubuntu-latest,
            container: "ghcr.io/thextech/wohlnet-ci-ubuntu1604-64bit:latest",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF \
            -DTHEXTECH_BUILD_GL_ES_LEGACY=OFF",

            deps_cmdline: "echo 'Ubuntu 16 x86_64, everything pre-installed'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-16-04-amd64",
            upload_directory: "www/ubuntu-16-04/"
          }
        - {
            name: "TAR Ubuntu 16.04 32bit",
            os: ubuntu-latest,
            container: "ghcr.io/thextech/wohlnet-ci-ubuntu1604-32bit:latest",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF \
            -DTHEXTECH_BUILD_GL_ES_LEGACY=OFF \
            -DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/ci_linux_gcc_toolchain_x32.cmake",

            deps_cmdline: "echo 'Ubuntu 16 x86_32, everything pre-installed'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-16-04-i386",
            upload_directory: "www/ubuntu-16-04/"
          }
        - {
            name: "TAR Ubuntu 18.04 x86_64",
            os: ubuntu-latest,
            container: "ghcr.io/thextech/wohlnet-ci-ubuntu1804:latest",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF \
            -DTHEXTECH_BUILD_GL_ES_LEGACY=OFF",

            deps_cmdline: "echo 'Ubuntu 18 x86_32, everything pre-installed'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-18-04-amd64",
            upload_directory: "www/ubuntu-18-04/"
          }
        - {
            name: "TAR Ubuntu 20.04 x86_64",
            os: ubuntu-latest,
            container: "ghcr.io/thextech/wohlnet-ci-ubuntu2004:latest",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF",

            deps_cmdline: "echo 'Ubuntu 20 x86_32, everything pre-installed'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-20-04-amd64",
            upload_directory: "www/ubuntu-20-04/"
          }
        - {
            name: "TAR Ubuntu 20.04 aarch64",
            os: ubuntu-24.04-arm,
            container: "arm64v8/ubuntu:20.04",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF",

            deps_cmdline: "apt-get update -qq \
            && apt-get install -y software-properties-common \
            && add-apt-repository -y \"ppa:git-core/ppa\" \
            && DEBIAN_FRONTEND=noninteractive apt-get install -qq sudo git p7zip-full cmake ninja-build lftp \
            \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev \
            libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev \
            libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev \
            libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev \
            libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa \
            libgles2-mesa-dev libgles-dev libmirclient-dev libproxy-dev build-essential \
            && git config --global --add safe.directory '*'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-20-04-aarch64",
            upload_directory: "www/ubuntu-20-04/"
          }
        - {
            name: "TAR Ubuntu 22.04 x86_64",
            os: ubuntu-latest,
            container: "ghcr.io/thextech/wohlnet-ci-ubuntu2204:latest",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF",

            deps_cmdline: "echo 'Ubuntu 22 x86_32, everything pre-installed'",

            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-22-04-amd64",
            upload_directory: "www/ubuntu-22-04/"
          }
        - {
            name: "TAR Ubuntu 24.04 x86_64",
            os: ubuntu-latest,
            container: "ghcr.io/thextech/wohlnet-ci-ubuntu2404:latest",

            extra_options: "-DTHEXTECH_EXECUTABLE_NAME=thextech \
            -DUSE_STATIC_LIBC=ON \
            -DUSE_SYSTEM_LIBS=OFF \
            -DUSE_SYSTEM_SDL2=OFF \
            -DUSE_SHARED_FREEIMAGE=OFF \
            -DPGE_SHARED_SDLMIXER=OFF",

            deps_cmdline: "echo 'Ubuntu 24 x86_32, everything pre-installed'",

            executable_name: "thextech",
            generator: "Ninja",
            build_type: "MinSizeRel",
            executable_name_suffix: "",
            package_filename_suffix: "ubuntu-24-04-amd64",
            upload_directory: "www/ubuntu-24-04/"
          }

    steps:
    - name: Check for the upload support
      id: upload-check
      shell: bash
      run: |
        if [[ "${{ secrets.builds_login }}" != '' && \
              "${{ secrets.builds_password }}" != '' && \
              "${{ secrets.builds_host }}" != '' ]]; then
          echo "available=true" >> $GITHUB_OUTPUT;
        else
          echo "available=false" >> $GITHUB_OUTPUT;
        fi

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.deps_cmdline }}" ]]; then
          eval ${{ matrix.config.deps_cmdline }}
        fi
        cmake --version

    - uses: TheXTech/checkout@v0.1

    - uses: TheXTech/branch-name@v0.1


    - name: Pull submodules
      shell: bash
      run: |
        git submodule update --init --recursive

    - name: Download SMBX assets
      shell: bash
      run: wget -d -nv -t 5 -O smbx13.7z "https://wohlsoft.ru/projects/TheXTech/_downloads/thextech-smbx13-assets-full.7z"

    - name: Download AoD assets
      shell: bash
      run: wget -d -nv -t 5 -O aod.7z "https://wohlsoft.ru/projects/TheXTech/_downloads/thextech-adventure-of-demo-assets-full.7z"

    - name: Unpack all assets
      shell: bash
      run: |
        mkdir -p smbx13
        cd smbx13
        7z x ../smbx13.7z
        cd ..
        rm smbx13.7z
        mkdir -p aod
        cd aod
        7z x ../aod.7z
        cd ..
        rm aod.7z

    - name: Apply update to translations
      shell: bash
      run: |
        ASSETS_ROOT1="$PWD/smbx13"
        ASSETS_ROOT2="$PWD/aod"
        cd .github/ci-helper
        bash translate_update.sh "${ASSETS_ROOT1}"
        bash translate_update.sh "${ASSETS_ROOT2}"
        cd ../..

    - name: Configure
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
          echo "PATH environment: ${PATH}"
        fi
        if [[ "${{ secrets.DISCORD_APP_ID }}" != '' ]]; then
          LOCAL_EXTRA_SETUP="-DTHEXTECH_ENABLE_DISCORD_RPC=ON -DTHEXTECH_DISCORD_APPID=\"${{ secrets.DISCORD_APP_ID }}\""
        fi
        cmake -B build -G "${{ matrix.config.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} ${{ matrix.config.extra_options }} ${LOCAL_EXTRA_SETUP} .

    - name: Build
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
        fi
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: List dependent libraries
      if: success() && runner.os == 'Linux'
      shell: bash
      run: |
        file build/output/bin/thextech
        ldd build/output/bin/thextech


    - name: Create Package
      if: success()
      id: create_package
      shell: bash
      # ======================================= Adventures of Demo =======================================
      # The side game about Demo and siblings from the A2XT universe by raocow and his fan community.
      # ======================================= Super Mario Bros. X - a fan-game =======================================
      # Was made in 2009 by Andrew Spinks "Redigit", and supported up to 2011 by it's original author.
      run: |
        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-adventures-of-demo" \
            "advdemo${{ matrix.config.executable_name_suffix }}" \
            "thextech-adventures-of-demo-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME}" \
            "aod"

        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-super-mario-bros-x" \
            "smbx${{ matrix.config.executable_name_suffix }}" \
            "thextech-super-mario-bros-x-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME}" \
            "smbx13"

        bash .github/ci-helper/pack-game.sh \
            "${{ runner.os }}" \
            "thextech-bin" \
            "thextech${{ matrix.config.executable_name_suffix }}" \
            "thextech-bin-${{ matrix.config.package_filename_suffix }}-${BRANCH_NAME}" \
            "none"

    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        path: build/package/*.tar.gz
        name: TheXTech ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: Deploy to builds.wohlsoft.ru
      if: steps.create_package.outcome == 'success' && github.event_name != 'pull_request' && steps.upload-check.outputs.available == 'true'
      continue-on-error: true
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
        fi
        UPLOAD_LIST="set ssl:verify-certificate no;"
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
            for q in ./build/package/*.7z; do
                UPLOAD_LIST="${UPLOAD_LIST} put -O ${{ matrix.config.upload_directory }} $q;"
            done
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
            for q in ./build/package/*.tar.gz; do
                UPLOAD_LIST="${UPLOAD_LIST} put -O ${{ matrix.config.upload_directory }} $q;"
            done
        fi
        lftp -e "${UPLOAD_LIST} exit" -u ${{ secrets.builds_login }},${{ secrets.builds_password }} ${{ secrets.builds_host }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build
